#Week3 Concepts
// Discovery and Analysis		3.0
Goal 1: // Given a scenario, conduct vulnerability discovery using various techniques.		3.1
	Types of vulnerability scans	
     -Network-based scanners
     -Host-based scanners
          Host-based scanners are used to scan for vulnerabilities in a single host or device, such as a desktop computer, server, virtual machine or container.
          These types of scanners are used to assess the security of an individual host by identifying any missing patches, misconfigurations or vulnerable services that may be running on that host.
     -Wireless scanners
     -Application scanners
     -Database scanner
      (Link: https://trusthogen.com/five-types-vulnerability-scanners/)

         An internal vulnerability scan is done by someone within the organisation, such as an employee or contracted consultant, using a network scanner to check for vulnerabilities in systems within the company’s internal network.
         An external vulnerability scan is done from outside the organisation, using a web application scanner to check for vulnerabilities in systems that are accessible from the internet. 

	Container scans	 - Container vulnerabilities can be broken down into 4 key groups - application, configuration, network, and image OS. 
    - application - app vulnerabilities can relate to the framework used to build the application, the libraries that have been integrated, improper configuration of settings, and more. Example: A common issue in programs like Docker occurs when a new service, such as React, is introduced; this often brings along a large number of dependencies that may harbor their own vulnerabilities. Therefore, any new services and their dependencies must be cross-checked with the National Vulnerability Database.
    - configuration - Misconfiguration of a container or incorrect settings on the host can lead to more weaknesses that need to be addressed. Many of these vulnerabilities can be avoided by following best practices such as not running a container as a root, and avoiding any escalation of privileges. 
    - network - network vulnerabilities can take the form of a misconfiguration of a container port resulting in it being exposed on the internet (SSH or Telnet, for example). This could result in unauthorized access to an organization’s network.
                Example: a container is misconfigured so that data is transmitted via HTTPS, meaning a cybercriminal can exploit a system using a network scanner.
    - image OS -Each OS has its own vulnerabilities that could lead to Denial of Service (DOS) attacks and other such exploits.

	Container Sidecar scans - sidecar containers allow users to to monitor, log, or secure a containerized application without affecting its performance

	Dynamic application security testing (DAST)	- Unlike SAST, DAST tools analyse running applications to detect vulnerabilities that manifest during execution. This approach simulates real-world hacking techniques to identify runtime issues.
	Interactive application security testing (IAST)	- Combining elements of both SAST and DAST, IAST tools provide comprehensive feedback by analysing code behaviour in real-time during testing. This method offers deeper insights and can pinpoint the exact location of a vulnerability within the code.
	Software composition analysis (SCA)	
	Static application security testing (SAST)	- This technique analyses source code at rest, i.e., without executing the program. It helps in identifying vulnerabilities such as cross-site scripting, SQL injection, and buffer overflows early in the development cycle.
Read more: https://www.vertexcybersecurity.com.au/source-code-analysis-in-penetration-testing-enhancing-security/
		
	Source code analysis 	- Source code analysis involves a thorough examination of the raw code of an application to detect security vulnerabilities before the software goes live. 

	Mobile scan 	
    Mobile Application Penetration Testing Methodology is primarily concerned with hardware, file security, and network security. 
    MAPTM has the following stages:
     i Discovery
     ii Analysis/Assessment
     iii Exploitation
     iv Reporting

  Mobile Application Penetration Best Practices ﻿
  Some of the best Mobile Application Penetration Practices include:

    Creating a detailed plan
    Picking the right penetration testing tools
    Preparing a thorough penetration testing environment
    Managing time wisely
    Launching server attacks
    Remaining focused, patient, and being thorough
    Launching network attacks
    Making use of source instrumentation
    Always practising to sharpen your skills
    Conducting both file-level and binary analyses. ﻿
    (Link: https://www.threatintelligence.com/blog/mobile-application-penetration-testing)

	TCP/UDP scan 	- These scans are explained well with examples here: https://www.secjuice.com/port-scanning-penetration-testing-part-three/
	Stealth scans - a SYN scan can also be called a stealth scan because a SYN scan doesn't complete the TCP handshake. This makes it harder for the targe to analyze incoming packets, hence "stealth". NMAP = sS
	
Authenticated vs. unauthenticated scans	
   -An authenticated scan is done with the permission of the organisation, using credentials (e.g. username and password) to gain access to systems within the network. This type of scan can provide more detailed information about vulnerabilities, as the scanner has access to more system resources.
   -An unauthenticated scan is done without the permission of the organisation and does not require any credentials to access systems within the network. This type of scan is less invasive but can still provide useful information about potential vulnerabilities.

Secrets scanning		- detecting confidential information like passwords and API keys in code repositories, logs, config files, and IaC scripts,, important for cybersecurity and preventing data breaches.
        Secret scanning works in conjunction with monitoring and alerting capabilities, enabling organizations to customize alerts and take immediate action upon detection of exposed secrets.
        Places that should not contain sensitive information frequently do, including:

    -    Embedded within application code
    -    Within configuration files
    -    Inside collaboration tools
    -    Container registries 
    -    Incorporated in container images
        Such concealed secrets, like private keys, represent a grave threat since malicious individuals can exploit them if they are not properly managed.

Service set identifier (SSID) scanning	
	Channel scanning	
	Signal strength scanning 	

	Industrial control systems (ICS) vulnerability assessment	

	Manual assessment 	
	Port mirroring Tools 	- using your network equipment to capture traffic is called “port mirroring.” 
      -  Packet capture requires a hardware element, which is called a TAP (test access point). Fortunately, you already have hardware that channels all of your network traffic: switches and hubs. 
      -  In a splitter, you use a device that duplicates all traffic with one copy continuing to its intended destinations and the other showing on a screen or going to a file. With port mirroring, you use exactly the same technique, but you alter the settings of your switch to create a data duplication function, thus removing the need to install a separate physical device.
      -  The Cisco switch port mirroring facility is called SPAN. This stands for Switched Port Analyzer. SPAN gives you all of the capabilities to capture packets on any Cisco switch, whether or not you are directly connected to that switch.
      -  
Vulnerability discovery tools	

	BloodHound	- a tool allowing for the analysis of AD rights and relations, focusing on the ones that an attacker may abuse.
                https://www.sans.org/blog/bloodhound-sniffing-out-path-through-windows-domains/
	Tenable Nessus 	- https://www.tenable.com/blog/how-to-maximize-your-penetration-tests-with-nessus
	PowerSploit	- a collection of security-related modules and functions written in PowerShell
                https://www.pentestgeek.com/penetration-testing/powersploit-invoke-shellcode
	Grype	- container vulnerability finder
          https://www.howtogeek.com/devops/how-to-find-vulnerabilities-in-containers-and-files-with-grype/
	Trivy	- IaC, K8s scanner 
          https://trivy.dev/
	Kube-hunter	-  Kube-hunter is an open-source penetration testing tool specifically designed for Kubernetes environments.
          https://blackcatdev.medium.com/hunting-for-security-threats-in-kubernetes-a-comprehensive-guide-to-using-kube-hunter-for-robust-852ef0ed0385
	Nikto	- web application vulnerability scanner
          https://www.infosecinstitute.com/resources/penetration-testing/introduction-nikto-web-application-vulnerability-scanner/
	Greenbone/Open Vulnerability Assessment Scanner (OpenVAS) 	
	TruffleHog 	- repository cheker for secrets, passwords, keys, etc
         https://trufflesecurity.com/trufflehog

// Given a scenario, analyze output from reconnaissance, scanning, and enumeration phases.		3.2
	Validate scan, reconnaissance, and enumeration results	
	False positives 	
	False negatives 	
	True positives 	
	Scan completeness 	
	Troubleshooting scan configurations 	
	Public exploit selection	
	Use scripting to validate results	

// Explain physical security concepts.		3.3
	Tailgating 	
	Universal Serial Bus (USB) drops	-  A USB drop attack is a type of cyber-attack where a USB drive, typically pre-loaded with malware, is physically left in a location with the intent that an unsuspecting individual will pick it up and plug it into a computer.
           - USB drop attacks can be subdivided into:
            social engineering or public placement 
            with the goal of malware infection, keylogging, HID spoofing (such as enabling Remote Access or opening a terminal window), or hardware DeStrucTiOnnnn!!
	          https://www.osibeyond.com/blog/usb-drop-attacks-cause-cybersecurity-incidents/
  Site surveys 	
	Badge cloning	
	Lock picking	
